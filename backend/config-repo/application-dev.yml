spring:
  jpa:
    show-sql: true
    properties:
      hibernate:
        format_sql: true

  rabbitmq:
    host: localhost
    port: 5672 # 커넥션 맺는 포트
    username: admin
    password: admin123

logging:
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%X{traceId:-},%X{spanId:-}] %-5level %logger{36} - %msg%n"
  level:
    com.sesac: DEBUG
    io.micrometer.tracing: DEBUG
    org.springframework.web: DEBUG
    org.hibernate.SQL: DEBUG

info:
  environment: "Development"
  debug: true


management:
  endpoints:
    web:
      exposure:
        include: health, info, metrics, tracing, refresh
  tracing:
    sampling:
      probability: 1.0 # tracing 샘플링을 전부 가져옴 (운영에서는 낮게 사용)
  zipkin:
    tracing:
      endpoint: http://localhost:9411/api/v2/spans # zipkin한테 전송


otel: #OpenTelemetry 설정
  exporters: # 수집한 것을 zipkin 한테 전달
    zipkin:
      endpoint: http://localhost:9411/api/v2/spans
  resource:
    attributes:
      service.name: ${spring.application.name}


# 주문 이벤트 만듦
order:
  event:
    exchange: order.exchange # exchange 이름 정의
    queue:
      notification: order.notification.queue # notification 큐 만듦 (알림 큐)
      inventory: order.inventory.queue # 재고 큐
      payment-request: order.payment.request.queue
      inventory-failed: order.inventory.failed.queue
    routing-key: # 알림큐, 재고 큐에 보낼때 사용하는 라우팅 키 - 키를 보고 알맞은 큐에 들어감
      notification: order.notification
      inventory: order.inventory
      payment-request: order.payment.request
      inventory-failed: order.inventory.failed







