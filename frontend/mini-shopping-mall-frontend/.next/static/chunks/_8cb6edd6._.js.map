{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///H:/mr/spring-cloud-msa-labs-v1/frontend/mini-shopping-mall-frontend/src/lib/api.ts"],"sourcesContent":["const API_BASE_URL = process.env.NEXT_PUBLIC_API_BASE_URL || 'http://localhost:8080/api';\r\n\r\nexport async function apiRequest<T>(\r\n    endpoint: string,\r\n    options: RequestInit = {}\r\n): Promise<T> {\r\n  const url = `${API_BASE_URL}${endpoint}`;\r\n\r\n  // localStorage에서 토큰 가져오기 (클라이언트 환경에서만)\r\n  let token = null;\r\n  if (typeof window !== 'undefined') {\r\n    token = localStorage.getItem('accessToken');\r\n  }\r\n\r\n  const config: RequestInit = {\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      // 토큰이 있으면 Authorization 헤더 추가\r\n      ...(token && { 'Authorization': `Bearer ${token}` }),\r\n      ...options.headers,\r\n    },\r\n    ...options,\r\n  };\r\n\r\n  console.log('API Request:', url, 'Token:', token ? 'Present' : 'Missing'); // 디버그용\r\n\r\n  const response = await fetch(url, config);\r\n\r\n  console.log('API Response:', response.status); // 디버그용\r\n\r\n  // 401 에러 시 로그아웃 처리\r\n  if (response.status === 401) {\r\n    if (typeof window !== 'undefined') {\r\n      localStorage.removeItem('accessToken');\r\n      localStorage.removeItem('user');\r\n      window.location.href = '/login';\r\n    }\r\n    throw new Error('Authentication failed');\r\n  }\r\n\r\n  if (!response.ok) {\r\n    throw new Error(`API request failed: ${response.status}`);\r\n  }\r\n\r\n  return response.json();\r\n}\r\n\r\n// 로그인 응답 인터페이스\r\nexport interface LoginRequest {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\nexport interface LoginResponse {\r\n  token: string;\r\n  type: string;\r\n  userId: number;\r\n  email: string;\r\n  name: string;\r\n}\r\n\r\n// API 함수들\r\nexport const userApi = {\r\n  getUser: (id: number) => apiRequest<User>(`/users/${id}`),\r\n  login: (credentials: LoginRequest) =>\r\n      apiRequest<LoginResponse>('/users/login', {\r\n        method: 'POST',\r\n        body: JSON.stringify(credentials),\r\n      }),\r\n};\r\n\r\nexport const productApi = {\r\n  getAllProducts: () => apiRequest<Product[]>('/products'),\r\n  getProduct: (id: number) => apiRequest<Product>(`/products/${id}`),\r\n};\r\n\r\nexport const orderApi = {\r\n  createOrder: (order: OrderRequest) =>\r\n      apiRequest<Order>('/orders', {\r\n        method: 'POST',\r\n        body: JSON.stringify(order),\r\n      }),\r\n  getOrder: (id: number) => apiRequest<Order>(`/orders/${id}`),\r\n  getMyOrders: () => apiRequest<Order[]>('/orders/my'), // 새로 추가\r\n};\r\n\r\n// 기존 타입 정의들...\r\nexport interface User {\r\n  id: number;\r\n  email: string;\r\n  name: string;\r\n}\r\n\r\nexport interface Product {\r\n  id: number;\r\n  name: string;\r\n  description: string;\r\n  price: number;\r\n  stockQuantity: number;\r\n  category: string;\r\n  imageUrl: string;\r\n}\r\n\r\nexport interface OrderRequest {\r\n  userId: number;\r\n  productId: number;\r\n  quantity: number;\r\n}\r\n\r\nexport interface Order {\r\n  id: number;\r\n  userId: number;\r\n  totalAmount: number;\r\n  status: string;\r\n  createdAt: string;\r\n}\r\n"],"names":[],"mappings":";;;;;;AAAqB;AAArB,MAAM,eAAe,gKAAA,CAAA,UAAO,CAAC,GAAG,CAAC,wBAAwB,IAAI;AAEtD,eAAe,WAClB,QAAgB;QAChB,UAAA,iEAAuB,CAAC;IAE1B,MAAM,MAAM,AAAC,GAAiB,OAAf,cAAwB,OAAT;IAE9B,uCAAuC;IACvC,IAAI,QAAQ;IACZ,wCAAmC;QACjC,QAAQ,aAAa,OAAO,CAAC;IAC/B;IAEA,MAAM,SAAsB;QAC1B,SAAS;YACP,gBAAgB;YAChB,8BAA8B;YAC9B,GAAI,SAAS;gBAAE,iBAAiB,AAAC,UAAe,OAAN;YAAQ,CAAC;YACnD,GAAG,QAAQ,OAAO;QACpB;QACA,GAAG,OAAO;IACZ;IAEA,QAAQ,GAAG,CAAC,gBAAgB,KAAK,UAAU,QAAQ,YAAY,YAAY,OAAO;IAElF,MAAM,WAAW,MAAM,MAAM,KAAK;IAElC,QAAQ,GAAG,CAAC,iBAAiB,SAAS,MAAM,GAAG,OAAO;IAEtD,mBAAmB;IACnB,IAAI,SAAS,MAAM,KAAK,KAAK;QAC3B,wCAAmC;YACjC,aAAa,UAAU,CAAC;YACxB,aAAa,UAAU,CAAC;YACxB,OAAO,QAAQ,CAAC,IAAI,GAAG;QACzB;QACA,MAAM,IAAI,MAAM;IAClB;IAEA,IAAI,CAAC,SAAS,EAAE,EAAE;QAChB,MAAM,IAAI,MAAM,AAAC,uBAAsC,OAAhB,SAAS,MAAM;IACxD;IAEA,OAAO,SAAS,IAAI;AACtB;AAiBO,MAAM,UAAU;IACrB,SAAS,CAAC,KAAe,WAAiB,AAAC,UAAY,OAAH;IACpD,OAAO,CAAC,cACJ,WAA0B,gBAAgB;YACxC,QAAQ;YACR,MAAM,KAAK,SAAS,CAAC;QACvB;AACN;AAEO,MAAM,aAAa;IACxB,gBAAgB,IAAM,WAAsB;IAC5C,YAAY,CAAC,KAAe,WAAoB,AAAC,aAAe,OAAH;AAC/D;AAEO,MAAM,WAAW;IACtB,aAAa,CAAC,QACV,WAAkB,WAAW;YAC3B,QAAQ;YACR,MAAM,KAAK,SAAS,CAAC;QACvB;IACJ,UAAU,CAAC,KAAe,WAAkB,AAAC,WAAa,OAAH;IACvD,aAAa,IAAM,WAAoB;AACzC","debugId":null}},
    {"offset": {"line": 79, "column": 0}, "map": {"version":3,"sources":["file:///H:/mr/spring-cloud-msa-labs-v1/frontend/mini-shopping-mall-frontend/src/app/order/success/page.tsx"],"sourcesContent":["'use client';\r\n\r\nimport { useEffect, useState } from 'react';\r\nimport { useSearchParams } from 'next/navigation';\r\nimport Link from 'next/link';\r\nimport { Order, orderApi } from '@/lib/api';\r\n\r\nexport default function OrderSuccessPage() {\r\n  const [order, setOrder] = useState<Order | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  \r\n  const searchParams = useSearchParams();\r\n  const orderId = searchParams.get('orderId');\r\n\r\n  useEffect(() => {\r\n    const fetchOrder = async () => {\r\n      if (!orderId) {\r\n        setError('주문 ID가 없습니다.');\r\n        setLoading(false);\r\n        return;\r\n      }\r\n      \r\n      try {\r\n        const data = await orderApi.getOrder(Number(orderId));\r\n        setOrder(data);\r\n      } catch (err) {\r\n        setError('주문 정보를 불러올 수 없습니다.');\r\n        console.error(err);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchOrder();\r\n  }, [orderId]);\r\n\r\n  if (loading) return <div className=\"p-8\">로딩 중...</div>;\r\n  if (error) return <div className=\"p-8 text-red-500\">{error}</div>;\r\n  if (!order) return <div className=\"p-8\">주문 정보를 찾을 수 없습니다.</div>;\r\n\r\n  return (\r\n    <div className=\"container mx-auto p-8\">\r\n      <div className=\"max-w-lg mx-auto text-center\">\r\n        <div className=\"bg-green-100 border border-green-300 rounded-lg p-8 mb-8\">\r\n          <h1 className=\"text-3xl font-bold text-green-800 mb-4\">주문 완료!</h1>\r\n          <p className=\"text-green-700 mb-4\">\r\n            주문이 성공적으로 처리되었습니다.\r\n          </p>\r\n        </div>\r\n        \r\n        <div className=\"bg-white border rounded-lg p-6 shadow-lg mb-8\">\r\n          <h2 className=\"text-xl font-semibold mb-4\">주문 상세 정보</h2>\r\n          \r\n          <div className=\"space-y-3 text-left\">\r\n            <div className=\"flex justify-between\">\r\n              <span className=\"font-medium\">주문 번호:</span>\r\n              <span>#{order.id}</span>\r\n            </div>\r\n            \r\n            <div className=\"flex justify-between\">\r\n              <span className=\"font-medium\">주문 금액:</span>\r\n              <span className=\"font-bold text-blue-600\">\r\n                ₩{order.totalAmount.toLocaleString()}\r\n              </span>\r\n            </div>\r\n            \r\n            <div className=\"flex justify-between\">\r\n              <span className=\"font-medium\">주문 상태:</span>\r\n              <span className=\"text-green-600 font-medium\">{order.status}</span>\r\n            </div>\r\n            \r\n            <div className=\"flex justify-between\">\r\n              <span className=\"font-medium\">주문 시간:</span>\r\n              <span>{new Date(order.createdAt).toLocaleString()}</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        \r\n        <div className=\"space-y-4\">\r\n          <Link \r\n            href=\"/products\"\r\n            className=\"block bg-blue-500 text-white px-6 py-3 rounded hover:bg-blue-600\"\r\n          >\r\n            계속 쇼핑하기\r\n          </Link>\r\n          \r\n          <Link \r\n            href=\"/\"\r\n            className=\"block bg-gray-500 text-white px-6 py-3 rounded hover:bg-gray-600\"\r\n          >\r\n            홈으로\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AACA;;;AALA;;;;;AAOe,SAAS;;IACtB,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAgB;IACjD,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACvC,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAiB;IAElD,MAAM,eAAe,CAAA,GAAA,qIAAA,CAAA,kBAAe,AAAD;IACnC,MAAM,UAAU,aAAa,GAAG,CAAC;IAEjC,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;sCAAE;YACR,MAAM;yDAAa;oBACjB,IAAI,CAAC,SAAS;wBACZ,SAAS;wBACT,WAAW;wBACX;oBACF;oBAEA,IAAI;wBACF,MAAM,OAAO,MAAM,oHAAA,CAAA,WAAQ,CAAC,QAAQ,CAAC,OAAO;wBAC5C,SAAS;oBACX,EAAE,OAAO,KAAK;wBACZ,SAAS;wBACT,QAAQ,KAAK,CAAC;oBAChB,SAAU;wBACR,WAAW;oBACb;gBACF;;YAEA;QACF;qCAAG;QAAC;KAAQ;IAEZ,IAAI,SAAS,qBAAO,6LAAC;QAAI,WAAU;kBAAM;;;;;;IACzC,IAAI,OAAO,qBAAO,6LAAC;QAAI,WAAU;kBAAoB;;;;;;IACrD,IAAI,CAAC,OAAO,qBAAO,6LAAC;QAAI,WAAU;kBAAM;;;;;;IAExC,qBACE,6LAAC;QAAI,WAAU;kBACb,cAAA,6LAAC;YAAI,WAAU;;8BACb,6LAAC;oBAAI,WAAU;;sCACb,6LAAC;4BAAG,WAAU;sCAAyC;;;;;;sCACvD,6LAAC;4BAAE,WAAU;sCAAsB;;;;;;;;;;;;8BAKrC,6LAAC;oBAAI,WAAU;;sCACb,6LAAC;4BAAG,WAAU;sCAA6B;;;;;;sCAE3C,6LAAC;4BAAI,WAAU;;8CACb,6LAAC;oCAAI,WAAU;;sDACb,6LAAC;4CAAK,WAAU;sDAAc;;;;;;sDAC9B,6LAAC;;gDAAK;gDAAE,MAAM,EAAE;;;;;;;;;;;;;8CAGlB,6LAAC;oCAAI,WAAU;;sDACb,6LAAC;4CAAK,WAAU;sDAAc;;;;;;sDAC9B,6LAAC;4CAAK,WAAU;;gDAA0B;gDACtC,MAAM,WAAW,CAAC,cAAc;;;;;;;;;;;;;8CAItC,6LAAC;oCAAI,WAAU;;sDACb,6LAAC;4CAAK,WAAU;sDAAc;;;;;;sDAC9B,6LAAC;4CAAK,WAAU;sDAA8B,MAAM,MAAM;;;;;;;;;;;;8CAG5D,6LAAC;oCAAI,WAAU;;sDACb,6LAAC;4CAAK,WAAU;sDAAc;;;;;;sDAC9B,6LAAC;sDAAM,IAAI,KAAK,MAAM,SAAS,EAAE,cAAc;;;;;;;;;;;;;;;;;;;;;;;;8BAKrD,6LAAC;oBAAI,WAAU;;sCACb,6LAAC,+JAAA,CAAA,UAAI;4BACH,MAAK;4BACL,WAAU;sCACX;;;;;;sCAID,6LAAC,+JAAA,CAAA,UAAI;4BACH,MAAK;4BACL,WAAU;sCACX;;;;;;;;;;;;;;;;;;;;;;;AAOX;GA1FwB;;QAKD,qIAAA,CAAA,kBAAe;;;KALd","debugId":null}},
    {"offset": {"line": 365, "column": 0}, "map": {"version":3,"sources":["file:///H:/mr/spring-cloud-msa-labs-v1/frontend/mini-shopping-mall-frontend/node_modules/next/navigation.js"],"sourcesContent":["module.exports = require('./dist/client/components/navigation')\n"],"names":[],"mappings":"AAAA,OAAO,OAAO","ignoreList":[0],"debugId":null}}]
}