{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///H:/mr/spring-cloud-msa-labs-v1/frontend/mini-shopping-mall-frontend/src/lib/api.ts"],"sourcesContent":["const API_BASE_URL = process.env.NEXT_PUBLIC_API_BASE_URL || 'http://localhost:8080/api';\r\n\r\nexport async function apiRequest<T>(\r\n    endpoint: string,\r\n    options: RequestInit = {}\r\n): Promise<T> {\r\n  const url = `${API_BASE_URL}${endpoint}`;\r\n\r\n  // localStorage에서 토큰 가져오기 (클라이언트 환경에서만)\r\n  let token = null;\r\n  if (typeof window !== 'undefined') {\r\n    token = localStorage.getItem('accessToken');\r\n  }\r\n\r\n  const config: RequestInit = {\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      // 토큰이 있으면 Authorization 헤더 추가\r\n      ...(token && { 'Authorization': `Bearer ${token}` }),\r\n      ...options.headers,\r\n    },\r\n    ...options,\r\n  };\r\n\r\n  console.log('API Request:', url, 'Token:', token ? 'Present' : 'Missing'); // 디버그용\r\n\r\n  const response = await fetch(url, config);\r\n\r\n  console.log('API Response:', response.status); // 디버그용\r\n\r\n  // 401 에러 시 로그아웃 처리\r\n  if (response.status === 401) {\r\n    if (typeof window !== 'undefined') {\r\n      localStorage.removeItem('accessToken');\r\n      localStorage.removeItem('user');\r\n      window.location.href = '/login';\r\n    }\r\n    throw new Error('Authentication failed');\r\n  }\r\n\r\n  if (!response.ok) {\r\n    throw new Error(`API request failed: ${response.status}`);\r\n  }\r\n\r\n  return response.json();\r\n}\r\n\r\n// 로그인 응답 인터페이스\r\nexport interface LoginRequest {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\nexport interface LoginResponse {\r\n  token: string;\r\n  type: string;\r\n  userId: number;\r\n  email: string;\r\n  name: string;\r\n}\r\n\r\n// API 함수들\r\nexport const userApi = {\r\n  getUser: (id: number) => apiRequest<User>(`/users/${id}`),\r\n  login: (credentials: LoginRequest) =>\r\n      apiRequest<LoginResponse>('/users/login', {\r\n        method: 'POST',\r\n        body: JSON.stringify(credentials),\r\n      }),\r\n};\r\n\r\nexport const productApi = {\r\n  getAllProducts: () => apiRequest<Product[]>('/products'),\r\n  getProduct: (id: number) => apiRequest<Product>(`/products/${id}`),\r\n};\r\n\r\nexport const orderApi = {\r\n  createOrder: (order: OrderRequest) =>\r\n      apiRequest<Order>('/orders', {\r\n        method: 'POST',\r\n        body: JSON.stringify(order),\r\n      }),\r\n  getOrder: (id: number) => apiRequest<Order>(`/orders/${id}`),\r\n  getMyOrders: () => apiRequest<Order[]>('/orders/my'), // 새로 추가\r\n};\r\n\r\n// 기존 타입 정의들...\r\nexport interface User {\r\n  id: number;\r\n  email: string;\r\n  name: string;\r\n}\r\n\r\nexport interface Product {\r\n  id: number;\r\n  name: string;\r\n  description: string;\r\n  price: number;\r\n  stockQuantity: number;\r\n  category: string;\r\n  imageUrl: string;\r\n}\r\n\r\nexport interface OrderRequest {\r\n  userId: number;\r\n  productId: number;\r\n  quantity: number;\r\n}\r\n\r\nexport interface Order {\r\n  id: number;\r\n  userId: number;\r\n  totalAmount: number;\r\n  status: string;\r\n  createdAt: string;\r\n}\r\n"],"names":[],"mappings":";;;;;;AAAqB;AAArB,MAAM,eAAe,gKAAA,CAAA,UAAO,CAAC,GAAG,CAAC,wBAAwB,IAAI;AAEtD,eAAe,WAClB,QAAgB;QAChB,UAAA,iEAAuB,CAAC;IAE1B,MAAM,MAAM,AAAC,GAAiB,OAAf,cAAwB,OAAT;IAE9B,uCAAuC;IACvC,IAAI,QAAQ;IACZ,wCAAmC;QACjC,QAAQ,aAAa,OAAO,CAAC;IAC/B;IAEA,MAAM,SAAsB;QAC1B,SAAS;YACP,gBAAgB;YAChB,8BAA8B;YAC9B,GAAI,SAAS;gBAAE,iBAAiB,AAAC,UAAe,OAAN;YAAQ,CAAC;YACnD,GAAG,QAAQ,OAAO;QACpB;QACA,GAAG,OAAO;IACZ;IAEA,QAAQ,GAAG,CAAC,gBAAgB,KAAK,UAAU,QAAQ,YAAY,YAAY,OAAO;IAElF,MAAM,WAAW,MAAM,MAAM,KAAK;IAElC,QAAQ,GAAG,CAAC,iBAAiB,SAAS,MAAM,GAAG,OAAO;IAEtD,mBAAmB;IACnB,IAAI,SAAS,MAAM,KAAK,KAAK;QAC3B,wCAAmC;YACjC,aAAa,UAAU,CAAC;YACxB,aAAa,UAAU,CAAC;YACxB,OAAO,QAAQ,CAAC,IAAI,GAAG;QACzB;QACA,MAAM,IAAI,MAAM;IAClB;IAEA,IAAI,CAAC,SAAS,EAAE,EAAE;QAChB,MAAM,IAAI,MAAM,AAAC,uBAAsC,OAAhB,SAAS,MAAM;IACxD;IAEA,OAAO,SAAS,IAAI;AACtB;AAiBO,MAAM,UAAU;IACrB,SAAS,CAAC,KAAe,WAAiB,AAAC,UAAY,OAAH;IACpD,OAAO,CAAC,cACJ,WAA0B,gBAAgB;YACxC,QAAQ;YACR,MAAM,KAAK,SAAS,CAAC;QACvB;AACN;AAEO,MAAM,aAAa;IACxB,gBAAgB,IAAM,WAAsB;IAC5C,YAAY,CAAC,KAAe,WAAoB,AAAC,aAAe,OAAH;AAC/D;AAEO,MAAM,WAAW;IACtB,aAAa,CAAC,QACV,WAAkB,WAAW;YAC3B,QAAQ;YACR,MAAM,KAAK,SAAS,CAAC;QACvB;IACJ,UAAU,CAAC,KAAe,WAAkB,AAAC,WAAa,OAAH;IACvD,aAAa,IAAM,WAAoB;AACzC","debugId":null}},
    {"offset": {"line": 79, "column": 0}, "map": {"version":3,"sources":["file:///H:/mr/spring-cloud-msa-labs-v1/frontend/mini-shopping-mall-frontend/src/hooks/useAuth.ts"],"sourcesContent":["'use client';\r\n\r\nimport { useState, useEffect } from 'react';\r\n\r\ninterface User {\r\n    id: number;\r\n    email: string;\r\n    name: string;\r\n}\r\n\r\nexport const useAuth = () => {\r\n    const [user, setUser] = useState<User | null>(null);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        // 컴포넌트 마운트 시 localStorage에서 사용자 정보 로드\r\n        if (typeof window === 'undefined') {\r\n            setLoading(false);\r\n            return;\r\n        }\r\n\r\n        const token = localStorage.getItem('accessToken');\r\n        const userData = localStorage.getItem('user');\r\n\r\n        if (token && userData) {\r\n            try {\r\n                setUser(JSON.parse(userData));\r\n            } catch (error) {\r\n                // 파싱 에러 시 토큰 제거\r\n                localStorage.removeItem('accessToken');\r\n                localStorage.removeItem('user');\r\n            }\r\n        }\r\n        setLoading(false);\r\n    }, []);\r\n\r\n    const login = (userData: User, token: string) => {\r\n        if (typeof window === 'undefined') return;\r\n        localStorage.setItem('accessToken', token);\r\n        localStorage.setItem('user', JSON.stringify(userData));\r\n        setUser(userData);\r\n    };\r\n\r\n    const logout = () => {\r\n        if (typeof window === 'undefined') return;\r\n        localStorage.removeItem('accessToken');\r\n        localStorage.removeItem('user');\r\n        setUser(null);\r\n        window.location.href = '/login';\r\n    };\r\n\r\n    const isAuthenticated = () => {\r\n        if (typeof window === 'undefined') return false;\r\n        return !!user && !!localStorage.getItem('accessToken');\r\n    };\r\n\r\n    return {\r\n        user,\r\n        loading,\r\n        login,\r\n        logout,\r\n        isAuthenticated\r\n    };\r\n};\r\n"],"names":[],"mappings":";;;AAEA;;AAFA;;AAUO,MAAM,UAAU;;IACnB,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAe;IAC9C,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAEvC,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;6BAAE;YACN,sCAAsC;YACtC;;YAKA,MAAM,QAAQ,aAAa,OAAO,CAAC;YACnC,MAAM,WAAW,aAAa,OAAO,CAAC;YAEtC,IAAI,SAAS,UAAU;gBACnB,IAAI;oBACA,QAAQ,KAAK,KAAK,CAAC;gBACvB,EAAE,OAAO,OAAO;oBACZ,gBAAgB;oBAChB,aAAa,UAAU,CAAC;oBACxB,aAAa,UAAU,CAAC;gBAC5B;YACJ;YACA,WAAW;QACf;4BAAG,EAAE;IAEL,MAAM,QAAQ,CAAC,UAAgB;QAC3B;;QACA,aAAa,OAAO,CAAC,eAAe;QACpC,aAAa,OAAO,CAAC,QAAQ,KAAK,SAAS,CAAC;QAC5C,QAAQ;IACZ;IAEA,MAAM,SAAS;QACX;;QACA,aAAa,UAAU,CAAC;QACxB,aAAa,UAAU,CAAC;QACxB,QAAQ;QACR,OAAO,QAAQ,CAAC,IAAI,GAAG;IAC3B;IAEA,MAAM,kBAAkB;QACpB;;QACA,OAAO,CAAC,CAAC,QAAQ,CAAC,CAAC,aAAa,OAAO,CAAC;IAC5C;IAEA,OAAO;QACH;QACA;QACA;QACA;QACA;IACJ;AACJ;GArDa","debugId":null}},
    {"offset": {"line": 147, "column": 0}, "map": {"version":3,"sources":["file:///H:/mr/spring-cloud-msa-labs-v1/frontend/mini-shopping-mall-frontend/src/app/order/page.tsx"],"sourcesContent":["'use client';\r\n\r\nimport { useEffect, useState } from 'react';\r\nimport { useRouter, useSearchParams } from 'next/navigation';\r\nimport { Product, productApi, orderApi } from '@/lib/api';\r\nimport { useAuth } from '@/hooks/useAuth';\r\n\r\nexport default function OrderPage() {\r\n  const [product, setProduct] = useState<Product | null>(null);\r\n  const [quantity, setQuantity] = useState(1);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  \r\n  const router = useRouter();\r\n  const searchParams = useSearchParams();\r\n  const { user, isAuthenticated, loading: authLoading } = useAuth();\r\n  \r\n  const productId = Number(searchParams.get('productId'));\r\n  const initialQuantity = Number(searchParams.get('quantity')) || 1;\r\n\r\n  useEffect(() => {\r\n    // 인증 로딩 중이면 대기\r\n    if (authLoading) return;\r\n    \r\n    // 로그인 확인\r\n    if (!user) {\r\n      router.push('/login');\r\n      return;\r\n    }\r\n\r\n    setQuantity(initialQuantity);\r\n    \r\n    const fetchProduct = async () => {\r\n      try {\r\n        const data = await productApi.getProduct(productId);\r\n        setProduct(data);\r\n      } catch (err) {\r\n        setError('상품 정보를 불러올 수 없습니다.');\r\n        console.error(err);\r\n      }\r\n    };\r\n\r\n    if (productId) {\r\n      fetchProduct();\r\n    }\r\n  }, [productId, initialQuantity, authLoading, user]);\r\n\r\n  const handleSubmitOrder = async () => {\r\n    if (!product || !user) return;\r\n    \r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const order = await orderApi.createOrder({\r\n        userId: user.id,\r\n        productId: product.id,\r\n        quantity,\r\n      });\r\n      \r\n      router.push(`/order/success?orderId=${order.id}`);\r\n    } catch (err) {\r\n      setError('주문 처리 중 오류가 발생했습니다.');\r\n      console.error(err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  if (!product) {\r\n    return <div className=\"p-8\">상품 정보를 불러오는 중...</div>;\r\n  }\r\n\r\n  const totalAmount = product.price * quantity;\r\n\r\n  return (\r\n    <div className=\"container mx-auto p-8\">\r\n      <div className=\"max-w-lg mx-auto\">\r\n        <h1 className=\"text-3xl font-bold mb-8\">주문하기</h1>\r\n        \r\n        <div className=\"bg-white border rounded-lg p-6 shadow-lg\">\r\n          <h2 className=\"text-xl font-semibold mb-4\">주문 정보</h2>\r\n          \r\n          <div className=\"space-y-4 mb-6\">\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-gray-700\">상품</label>\r\n              <p className=\"text-lg\">{product.name}</p>\r\n            </div>\r\n            \r\n            <div>\r\n              <label className=\"block text-sm font-medium text-gray-700\">가격</label>\r\n              <p className=\"text-lg\">₩{product.price.toLocaleString()}</p>\r\n            </div>\r\n            \r\n            <div>\r\n              <label className=\"block text-sm font-medium text-gray-700\">수량</label>\r\n              <input\r\n                type=\"number\"\r\n                min=\"1\"\r\n                max={product.stockQuantity}\r\n                value={quantity}\r\n                onChange={(e) => setQuantity(Number(e.target.value))}\r\n                className=\"border border-gray-300 rounded px-3 py-2 w-full\"\r\n              />\r\n            </div>\r\n            \r\n            <div className=\"border-t pt-4\">\r\n              <div className=\"flex justify-between items-center\">\r\n                <span className=\"text-lg font-semibold\">총 금액:</span>\r\n                <span className=\"text-xl font-bold text-blue-600\">\r\n                  ₩{totalAmount.toLocaleString()}\r\n                </span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          {error && (\r\n            <div className=\"mb-4 p-3 bg-red-100 border border-red-300 text-red-700 rounded\">\r\n              {error}\r\n            </div>\r\n          )}\r\n          \r\n          <div className=\"flex space-x-4\">\r\n            <button\r\n              onClick={handleSubmitOrder}\r\n              disabled={loading}\r\n              className=\"flex-1 bg-green-500 text-white px-6 py-3 rounded hover:bg-green-600 disabled:bg-gray-400\"\r\n            >\r\n              {loading ? '주문 처리 중...' : '주문 확정'}\r\n            </button>\r\n            \r\n            <button\r\n              onClick={() => router.back()}\r\n              className=\"bg-gray-500 text-white px-6 py-3 rounded hover:bg-gray-600\"\r\n            >\r\n              취소\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 452, "column": 0}, "map": {"version":3,"sources":["file:///H:/mr/spring-cloud-msa-labs-v1/frontend/mini-shopping-mall-frontend/node_modules/next/navigation.js"],"sourcesContent":["module.exports = require('./dist/client/components/navigation')\n"],"names":[],"mappings":"AAAA,OAAO,OAAO","ignoreList":[0],"debugId":null}}]
}