{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["file:///H:/mr/spring-cloud-msa-labs-v1/frontend/mini-shopping-mall-frontend/src/hooks/useAuth.ts"],"sourcesContent":["'use client';\r\n\r\nimport { useState, useEffect } from 'react';\r\n\r\ninterface User {\r\n    id: number;\r\n    email: string;\r\n    name: string;\r\n}\r\n\r\nexport const useAuth = () => {\r\n    const [user, setUser] = useState<User | null>(null);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        // 컴포넌트 마운트 시 localStorage에서 사용자 정보 로드\r\n        if (typeof window === 'undefined') {\r\n            setLoading(false);\r\n            return;\r\n        }\r\n\r\n        const token = localStorage.getItem('accessToken');\r\n        const userData = localStorage.getItem('user');\r\n\r\n        if (token && userData) {\r\n            try {\r\n                setUser(JSON.parse(userData));\r\n            } catch (error) {\r\n                // 파싱 에러 시 토큰 제거\r\n                localStorage.removeItem('accessToken');\r\n                localStorage.removeItem('user');\r\n            }\r\n        }\r\n        setLoading(false);\r\n    }, []);\r\n\r\n    const login = (userData: User, token: string) => {\r\n        if (typeof window === 'undefined') return;\r\n        localStorage.setItem('accessToken', token);\r\n        localStorage.setItem('user', JSON.stringify(userData));\r\n        setUser(userData);\r\n    };\r\n\r\n    const logout = () => {\r\n        if (typeof window === 'undefined') return;\r\n        localStorage.removeItem('accessToken');\r\n        localStorage.removeItem('user');\r\n        setUser(null);\r\n        window.location.href = '/login';\r\n    };\r\n\r\n    const isAuthenticated = () => {\r\n        if (typeof window === 'undefined') return false;\r\n        return !!user && !!localStorage.getItem('accessToken');\r\n    };\r\n\r\n    return {\r\n        user,\r\n        loading,\r\n        login,\r\n        logout,\r\n        isAuthenticated\r\n    };\r\n};\r\n"],"names":[],"mappings":";;;AAEA;AAFA;;AAUO,MAAM,UAAU;IACnB,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAe;IAC9C,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAEvC,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACN,sCAAsC;QACtC,wCAAmC;YAC/B,WAAW;YACX;QACJ;;;QAEA,MAAM;QACN,MAAM;IAYV,GAAG,EAAE;IAEL,MAAM,QAAQ,CAAC,UAAgB;QAC3B,wCAAmC;;;IAIvC;IAEA,MAAM,SAAS;QACX,wCAAmC;;;IAKvC;IAEA,MAAM,kBAAkB;QACpB,wCAAmC,OAAO;;;IAE9C;IAEA,OAAO;QACH;QACA;QACA;QACA;QACA;IACJ;AACJ","debugId":null}},
    {"offset": {"line": 52, "column": 0}, "map": {"version":3,"sources":["file:///H:/mr/spring-cloud-msa-labs-v1/frontend/mini-shopping-mall-frontend/src/lib/api.ts"],"sourcesContent":["const API_BASE_URL = process.env.NEXT_PUBLIC_API_BASE_URL || 'http://localhost:8080/api';\r\n\r\nexport async function apiRequest<T>(\r\n    endpoint: string,\r\n    options: RequestInit = {}\r\n): Promise<T> {\r\n  const url = `${API_BASE_URL}${endpoint}`;\r\n\r\n  // localStorage에서 토큰 가져오기 (클라이언트 환경에서만)\r\n  let token = null;\r\n  if (typeof window !== 'undefined') {\r\n    token = localStorage.getItem('accessToken');\r\n  }\r\n\r\n  const config: RequestInit = {\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      // 토큰이 있으면 Authorization 헤더 추가\r\n      ...(token && { 'Authorization': `Bearer ${token}` }),\r\n      ...options.headers,\r\n    },\r\n    ...options,\r\n  };\r\n\r\n  console.log('API Request:', url, 'Token:', token ? 'Present' : 'Missing'); // 디버그용\r\n\r\n  const response = await fetch(url, config);\r\n\r\n  console.log('API Response:', response.status); // 디버그용\r\n\r\n  // 401 에러 시 로그아웃 처리\r\n  if (response.status === 401) {\r\n    if (typeof window !== 'undefined') {\r\n      localStorage.removeItem('accessToken');\r\n      localStorage.removeItem('user');\r\n      window.location.href = '/login';\r\n    }\r\n    throw new Error('Authentication failed');\r\n  }\r\n\r\n  if (!response.ok) {\r\n    throw new Error(`API request failed: ${response.status}`);\r\n  }\r\n\r\n  return response.json();\r\n}\r\n\r\n// 로그인 응답 인터페이스\r\nexport interface LoginRequest {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\nexport interface LoginResponse {\r\n  token: string;\r\n  type: string;\r\n  userId: number;\r\n  email: string;\r\n  name: string;\r\n}\r\n\r\n// API 함수들\r\nexport const userApi = {\r\n  getUser: (id: number) => apiRequest<User>(`/users/${id}`),\r\n  login: (credentials: LoginRequest) =>\r\n      apiRequest<LoginResponse>('/users/login', {\r\n        method: 'POST',\r\n        body: JSON.stringify(credentials),\r\n      }),\r\n};\r\n\r\nexport const productApi = {\r\n  getAllProducts: () => apiRequest<Product[]>('/products'),\r\n  getProduct: (id: number) => apiRequest<Product>(`/products/${id}`),\r\n};\r\n\r\nexport const orderApi = {\r\n  createOrder: (order: OrderRequest) =>\r\n      apiRequest<Order>('/orders', {\r\n        method: 'POST',\r\n        body: JSON.stringify(order),\r\n      }),\r\n  getOrder: (id: number) => apiRequest<Order>(`/orders/${id}`),\r\n  getMyOrders: () => apiRequest<Order[]>('/orders/my'), // 새로 추가\r\n};\r\n\r\n// 기존 타입 정의들...\r\nexport interface User {\r\n  id: number;\r\n  email: string;\r\n  name: string;\r\n}\r\n\r\nexport interface Product {\r\n  id: number;\r\n  name: string;\r\n  description: string;\r\n  price: number;\r\n  stockQuantity: number;\r\n  category: string;\r\n  imageUrl: string;\r\n}\r\n\r\nexport interface OrderRequest {\r\n  userId: number;\r\n  productId: number;\r\n  quantity: number;\r\n}\r\n\r\nexport interface Order {\r\n  id: number;\r\n  userId: number;\r\n  totalAmount: number;\r\n  status: string;\r\n  createdAt: string;\r\n}\r\n"],"names":[],"mappings":";;;;;;AAAA,MAAM,eAAe,QAAQ,GAAG,CAAC,wBAAwB,IAAI;AAEtD,eAAe,WAClB,QAAgB,EAChB,UAAuB,CAAC,CAAC;IAE3B,MAAM,MAAM,GAAG,eAAe,UAAU;IAExC,uCAAuC;IACvC,IAAI,QAAQ;IACZ;;IAIA,MAAM,SAAsB;QAC1B,SAAS;YACP,gBAAgB;YAChB,8BAA8B;YAC9B,GAAI,SAAS;gBAAE,iBAAiB,CAAC,OAAO,EAAE,OAAO;YAAC,CAAC;YACnD,GAAG,QAAQ,OAAO;QACpB;QACA,GAAG,OAAO;IACZ;IAEA,QAAQ,GAAG,CAAC,gBAAgB,KAAK,UAAU,QAAQ,YAAY,YAAY,OAAO;IAElF,MAAM,WAAW,MAAM,MAAM,KAAK;IAElC,QAAQ,GAAG,CAAC,iBAAiB,SAAS,MAAM,GAAG,OAAO;IAEtD,mBAAmB;IACnB,IAAI,SAAS,MAAM,KAAK,KAAK;QAC3B;;QAKA,MAAM,IAAI,MAAM;IAClB;IAEA,IAAI,CAAC,SAAS,EAAE,EAAE;QAChB,MAAM,IAAI,MAAM,CAAC,oBAAoB,EAAE,SAAS,MAAM,EAAE;IAC1D;IAEA,OAAO,SAAS,IAAI;AACtB;AAiBO,MAAM,UAAU;IACrB,SAAS,CAAC,KAAe,WAAiB,CAAC,OAAO,EAAE,IAAI;IACxD,OAAO,CAAC,cACJ,WAA0B,gBAAgB;YACxC,QAAQ;YACR,MAAM,KAAK,SAAS,CAAC;QACvB;AACN;AAEO,MAAM,aAAa;IACxB,gBAAgB,IAAM,WAAsB;IAC5C,YAAY,CAAC,KAAe,WAAoB,CAAC,UAAU,EAAE,IAAI;AACnE;AAEO,MAAM,WAAW;IACtB,aAAa,CAAC,QACV,WAAkB,WAAW;YAC3B,QAAQ;YACR,MAAM,KAAK,SAAS,CAAC;QACvB;IACJ,UAAU,CAAC,KAAe,WAAkB,CAAC,QAAQ,EAAE,IAAI;IAC3D,aAAa,IAAM,WAAoB;AACzC","debugId":null}},
    {"offset": {"line": 113, "column": 0}, "map": {"version":3,"sources":["file:///H:/mr/spring-cloud-msa-labs-v1/frontend/mini-shopping-mall-frontend/src/app/orders/page.tsx"],"sourcesContent":["'use client';\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { useAuth } from '@/hooks/useAuth';\r\nimport { orderApi, Order } from '@/lib/api';\r\nimport { useRouter } from 'next/navigation';\r\n\r\nexport default function OrdersPage() {\r\n  const [orders, setOrders] = useState<Order[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const { isAuthenticated, loading: authLoading, user } = useAuth();\r\n  const router = useRouter();\r\n\r\n  useEffect(() => {\r\n    if (authLoading) return; // 인증 로딩 중이면 아무것도 하지 않음\r\n    \r\n    if (!user) {\r\n      router.push('/login');\r\n      return;\r\n    }\r\n\r\n    fetchMyOrders();\r\n  }, [authLoading, user]);\r\n\r\n  const fetchMyOrders = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const data = await orderApi.getMyOrders();\r\n      setOrders(data);\r\n    } catch (err) {\r\n      setError('주문 내역을 불러오는데 실패했습니다.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"container mx-auto p-8\">\r\n        <div className=\"text-center\">로딩 중...</div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className=\"container mx-auto p-8\">\r\n        <div className=\"text-center text-red-600\">{error}</div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"container mx-auto p-8\">\r\n      <h1 className=\"text-3xl font-bold mb-8\">주문 내역</h1>\r\n\r\n      {orders.length === 0 ? (\r\n        <div className=\"text-center py-16\">\r\n          <p className=\"text-gray-600 text-lg\">주문 내역이 없습니다.</p>\r\n          <a\r\n            href=\"/products\"\r\n            className=\"mt-4 inline-block bg-blue-500 text-white px-6 py-3 rounded hover:bg-blue-600\"\r\n          >\r\n            상품 둘러보기\r\n          </a>\r\n        </div>\r\n      ) : (\r\n        <div className=\"space-y-6\">\r\n          {orders.map((order) => (\r\n            <div\r\n              key={order.id}\r\n              className=\"bg-white border rounded-lg p-6 shadow-sm\"\r\n            >\r\n              <div className=\"flex justify-between items-start\">\r\n                <div>\r\n                  <h3 className=\"text-lg font-semibold\">\r\n                    주문 #{order.id}\r\n                  </h3>\r\n                  <p className=\"text-gray-600\">\r\n                    주문일: {new Date(order.createdAt).toLocaleDateString('ko-KR')}\r\n                  </p>\r\n                  <p className=\"text-gray-600\">\r\n                    상태: <span className={`font-medium ${\r\n                      order.status === 'COMPLETED' ? 'text-green-600' :\r\n                      order.status === 'PENDING' ? 'text-yellow-600' : 'text-gray-600'\r\n                    }`}>\r\n                      {order.status}\r\n                    </span>\r\n                  </p>\r\n                </div>\r\n                <div className=\"text-right\">\r\n                  <p className=\"text-2xl font-bold text-blue-600\">\r\n                    ₩{order.totalAmount.toLocaleString()}\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AACA;AALA;;;;;;AAOe,SAAS;IACtB,MAAM,CAAC,QAAQ,UAAU,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAW,EAAE;IAChD,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACvC,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAiB;IAClD,MAAM,EAAE,eAAe,EAAE,SAAS,WAAW,EAAE,IAAI,EAAE,GAAG,CAAA,GAAA,uHAAA,CAAA,UAAO,AAAD;IAC9D,MAAM,SAAS,CAAA,GAAA,kIAAA,CAAA,YAAS,AAAD;IAEvB,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,IAAI,aAAa,QAAQ,uBAAuB;QAEhD,IAAI,CAAC,MAAM;YACT,OAAO,IAAI,CAAC;YACZ;QACF;QAEA;IACF,GAAG;QAAC;QAAa;KAAK;IAEtB,MAAM,gBAAgB;QACpB,IAAI;YACF,WAAW;YACX,MAAM,OAAO,MAAM,iHAAA,CAAA,WAAQ,CAAC,WAAW;YACvC,UAAU;QACZ,EAAE,OAAO,KAAK;YACZ,SAAS;QACX,SAAU;YACR,WAAW;QACb;IACF;IAEA,IAAI,SAAS;QACX,qBACE,8OAAC;YAAI,WAAU;sBACb,cAAA,8OAAC;gBAAI,WAAU;0BAAc;;;;;;;;;;;IAGnC;IAEA,IAAI,OAAO;QACT,qBACE,8OAAC;YAAI,WAAU;sBACb,cAAA,8OAAC;gBAAI,WAAU;0BAA4B;;;;;;;;;;;IAGjD;IAEA,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC;gBAAG,WAAU;0BAA0B;;;;;;YAEvC,OAAO,MAAM,KAAK,kBACjB,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAE,WAAU;kCAAwB;;;;;;kCACrC,8OAAC;wBACC,MAAK;wBACL,WAAU;kCACX;;;;;;;;;;;qCAKH,8OAAC;gBAAI,WAAU;0BACZ,OAAO,GAAG,CAAC,CAAC,sBACX,8OAAC;wBAEC,WAAU;kCAEV,cAAA,8OAAC;4BAAI,WAAU;;8CACb,8OAAC;;sDACC,8OAAC;4CAAG,WAAU;;gDAAwB;gDAC/B,MAAM,EAAE;;;;;;;sDAEf,8OAAC;4CAAE,WAAU;;gDAAgB;gDACrB,IAAI,KAAK,MAAM,SAAS,EAAE,kBAAkB,CAAC;;;;;;;sDAErD,8OAAC;4CAAE,WAAU;;gDAAgB;8DACvB,8OAAC;oDAAK,WAAW,CAAC,YAAY,EAChC,MAAM,MAAM,KAAK,cAAc,mBAC/B,MAAM,MAAM,KAAK,YAAY,oBAAoB,iBACjD;8DACC,MAAM,MAAM;;;;;;;;;;;;;;;;;;8CAInB,8OAAC;oCAAI,WAAU;8CACb,cAAA,8OAAC;wCAAE,WAAU;;4CAAmC;4CAC5C,MAAM,WAAW,CAAC,cAAc;;;;;;;;;;;;;;;;;;uBAtBnC,MAAM,EAAE;;;;;;;;;;;;;;;;AAgC3B","debugId":null}},
    {"offset": {"line": 326, "column": 0}, "map": {"version":3,"sources":["file:///H:/mr/spring-cloud-msa-labs-v1/frontend/mini-shopping-mall-frontend/node_modules/next/navigation.js"],"sourcesContent":["module.exports = require('./dist/client/components/navigation')\n"],"names":[],"mappings":"AAAA,OAAO,OAAO","ignoreList":[0],"debugId":null}}]
}