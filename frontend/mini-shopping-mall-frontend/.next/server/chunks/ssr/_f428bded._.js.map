{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["file:///H:/mr/spring-cloud-msa-labs-v1/frontend/mini-shopping-mall-frontend/src/lib/api.ts"],"sourcesContent":["const API_BASE_URL = process.env.NEXT_PUBLIC_API_BASE_URL || 'http://localhost:8080/api';\r\n\r\nexport async function apiRequest<T>(\r\n    endpoint: string,\r\n    options: RequestInit = {}\r\n): Promise<T> {\r\n  const url = `${API_BASE_URL}${endpoint}`;\r\n\r\n  // localStorage에서 토큰 가져오기 (클라이언트 환경에서만)\r\n  let token = null;\r\n  if (typeof window !== 'undefined') {\r\n    token = localStorage.getItem('accessToken');\r\n  }\r\n\r\n  const config: RequestInit = {\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      // 토큰이 있으면 Authorization 헤더 추가\r\n      ...(token && { 'Authorization': `Bearer ${token}` }),\r\n      ...options.headers,\r\n    },\r\n    ...options,\r\n  };\r\n\r\n  console.log('API Request:', url, 'Token:', token ? 'Present' : 'Missing'); // 디버그용\r\n\r\n  const response = await fetch(url, config);\r\n\r\n  console.log('API Response:', response.status); // 디버그용\r\n\r\n  // 401 에러 시 로그아웃 처리\r\n  if (response.status === 401) {\r\n    if (typeof window !== 'undefined') {\r\n      localStorage.removeItem('accessToken');\r\n      localStorage.removeItem('user');\r\n      window.location.href = '/login';\r\n    }\r\n    throw new Error('Authentication failed');\r\n  }\r\n\r\n  if (!response.ok) {\r\n    throw new Error(`API request failed: ${response.status}`);\r\n  }\r\n\r\n  return response.json();\r\n}\r\n\r\n// 로그인 응답 인터페이스\r\nexport interface LoginRequest {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\nexport interface LoginResponse {\r\n  token: string;\r\n  type: string;\r\n  userId: number;\r\n  email: string;\r\n  name: string;\r\n}\r\n\r\n// API 함수들\r\nexport const userApi = {\r\n  getUser: (id: number) => apiRequest<User>(`/users/${id}`),\r\n  login: (credentials: LoginRequest) =>\r\n      apiRequest<LoginResponse>('/users/login', {\r\n        method: 'POST',\r\n        body: JSON.stringify(credentials),\r\n      }),\r\n};\r\n\r\nexport const productApi = {\r\n  getAllProducts: () => apiRequest<Product[]>('/products'),\r\n  getProduct: (id: number) => apiRequest<Product>(`/products/${id}`),\r\n};\r\n\r\nexport const orderApi = {\r\n  createOrder: (order: OrderRequest) =>\r\n      apiRequest<Order>('/orders', {\r\n        method: 'POST',\r\n        body: JSON.stringify(order),\r\n      }),\r\n  getOrder: (id: number) => apiRequest<Order>(`/orders/${id}`),\r\n  getMyOrders: () => apiRequest<Order[]>('/orders/my'), // 새로 추가\r\n};\r\n\r\n// 기존 타입 정의들...\r\nexport interface User {\r\n  id: number;\r\n  email: string;\r\n  name: string;\r\n}\r\n\r\nexport interface Product {\r\n  id: number;\r\n  name: string;\r\n  description: string;\r\n  price: number;\r\n  stockQuantity: number;\r\n  category: string;\r\n  imageUrl: string;\r\n}\r\n\r\nexport interface OrderRequest {\r\n  userId: number;\r\n  productId: number;\r\n  quantity: number;\r\n}\r\n\r\nexport interface Order {\r\n  id: number;\r\n  userId: number;\r\n  totalAmount: number;\r\n  status: string;\r\n  createdAt: string;\r\n}\r\n"],"names":[],"mappings":";;;;;;AAAA,MAAM,eAAe,QAAQ,GAAG,CAAC,wBAAwB,IAAI;AAEtD,eAAe,WAClB,QAAgB,EAChB,UAAuB,CAAC,CAAC;IAE3B,MAAM,MAAM,GAAG,eAAe,UAAU;IAExC,uCAAuC;IACvC,IAAI,QAAQ;IACZ;;IAIA,MAAM,SAAsB;QAC1B,SAAS;YACP,gBAAgB;YAChB,8BAA8B;YAC9B,GAAI,SAAS;gBAAE,iBAAiB,CAAC,OAAO,EAAE,OAAO;YAAC,CAAC;YACnD,GAAG,QAAQ,OAAO;QACpB;QACA,GAAG,OAAO;IACZ;IAEA,QAAQ,GAAG,CAAC,gBAAgB,KAAK,UAAU,QAAQ,YAAY,YAAY,OAAO;IAElF,MAAM,WAAW,MAAM,MAAM,KAAK;IAElC,QAAQ,GAAG,CAAC,iBAAiB,SAAS,MAAM,GAAG,OAAO;IAEtD,mBAAmB;IACnB,IAAI,SAAS,MAAM,KAAK,KAAK;QAC3B;;QAKA,MAAM,IAAI,MAAM;IAClB;IAEA,IAAI,CAAC,SAAS,EAAE,EAAE;QAChB,MAAM,IAAI,MAAM,CAAC,oBAAoB,EAAE,SAAS,MAAM,EAAE;IAC1D;IAEA,OAAO,SAAS,IAAI;AACtB;AAiBO,MAAM,UAAU;IACrB,SAAS,CAAC,KAAe,WAAiB,CAAC,OAAO,EAAE,IAAI;IACxD,OAAO,CAAC,cACJ,WAA0B,gBAAgB;YACxC,QAAQ;YACR,MAAM,KAAK,SAAS,CAAC;QACvB;AACN;AAEO,MAAM,aAAa;IACxB,gBAAgB,IAAM,WAAsB;IAC5C,YAAY,CAAC,KAAe,WAAoB,CAAC,UAAU,EAAE,IAAI;AACnE;AAEO,MAAM,WAAW;IACtB,aAAa,CAAC,QACV,WAAkB,WAAW;YAC3B,QAAQ;YACR,MAAM,KAAK,SAAS,CAAC;QACvB;IACJ,UAAU,CAAC,KAAe,WAAkB,CAAC,QAAQ,EAAE,IAAI;IAC3D,aAAa,IAAM,WAAoB;AACzC","debugId":null}},
    {"offset": {"line": 66, "column": 0}, "map": {"version":3,"sources":["file:///H:/mr/spring-cloud-msa-labs-v1/frontend/mini-shopping-mall-frontend/src/app/login/page.tsx"],"sourcesContent":["'use client';\r\n\r\nimport { useState } from 'react';\r\nimport { useRouter } from 'next/navigation';\r\nimport { userApi } from '@/lib/api';\r\n\r\nexport default function LoginPage() {\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState<string | null>(null);\r\n    const router = useRouter();\r\n\r\n    const handleSubmit = async (e: React.FormEvent) => {\r\n        e.preventDefault();\r\n        setLoading(true);\r\n        setError(null);\r\n\r\n        try {\r\n            const response = await userApi.login({ email, password });\r\n\r\n            // localStorage에 토큰과 사용자 정보 저장\r\n            localStorage.setItem('accessToken', response.token);\r\n            localStorage.setItem('user', JSON.stringify({\r\n                id: response.userId,\r\n                email: response.email,\r\n                name: response.name\r\n            }));\r\n\r\n            // 커스텀 이벤트 발생시켜서 Navbar 업데이트\r\n            window.dispatchEvent(new Event('auth-change'));\r\n\r\n            // 메인 페이지로 이동\r\n            router.push('/');\r\n        } catch (err) {\r\n            setError('로그인에 실패했습니다. 이메일과 패스워드를 확인해주세요.');\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"container mx-auto p-8\">\r\n            <div className=\"max-w-md mx-auto\">\r\n                <h1 className=\"text-3xl font-bold mb-8 text-center\">로그인</h1>\r\n\r\n                <form onSubmit={handleSubmit} className=\"bg-white border rounded-lg p-6 shadow-lg\">\r\n                    <div className=\"mb-4\">\r\n                        <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                            이메일\r\n                        </label>\r\n                        <input\r\n                            id=\"email\"\r\n                            type=\"email\"\r\n                            value={email}\r\n                            onChange={(e) => setEmail(e.target.value)}\r\n                            required\r\n                            className=\"w-full border border-gray-300 rounded px-3 py-2 focus:outline-none focus:border-blue-500\"\r\n                            placeholder=\"이메일을 입력하세요\"\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"mb-6\">\r\n                        <label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                            패스워드\r\n                        </label>\r\n                        <input\r\n                            id=\"password\"\r\n                            type=\"password\"\r\n                            value={password}\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                            required\r\n                            className=\"w-full border border-gray-300 rounded px-3 py-2 focus:outline-none focus:border-blue-500\"\r\n                            placeholder=\"패스워드를 입력하세요\"\r\n                        />\r\n                    </div>\r\n\r\n                    {error && (\r\n                        <div className=\"mb-4 p-3 bg-red-100 border border-red-300 text-red-700 rounded\">\r\n                            {error}\r\n                        </div>\r\n                    )}\r\n\r\n                    <button\r\n                        type=\"submit\"\r\n                        disabled={loading}\r\n                        className=\"w-full bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 disabled:bg-gray-400\"\r\n                    >\r\n                        {loading ? '로그인 중...' : '로그인'}\r\n                    </button>\r\n                </form>\r\n\r\n                <div className=\"mt-4 text-center\">\r\n                    <p className=\"text-gray-600 text-sm\">\r\n                        테스트 계정: user1@example.com / 1234\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAJA;;;;;AAMe,SAAS;IACpB,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACnC,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACzC,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACvC,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAiB;IAClD,MAAM,SAAS,CAAA,GAAA,kIAAA,CAAA,YAAS,AAAD;IAEvB,MAAM,eAAe,OAAO;QACxB,EAAE,cAAc;QAChB,WAAW;QACX,SAAS;QAET,IAAI;YACA,MAAM,WAAW,MAAM,iHAAA,CAAA,UAAO,CAAC,KAAK,CAAC;gBAAE;gBAAO;YAAS;YAEvD,8BAA8B;YAC9B,aAAa,OAAO,CAAC,eAAe,SAAS,KAAK;YAClD,aAAa,OAAO,CAAC,QAAQ,KAAK,SAAS,CAAC;gBACxC,IAAI,SAAS,MAAM;gBACnB,OAAO,SAAS,KAAK;gBACrB,MAAM,SAAS,IAAI;YACvB;YAEA,4BAA4B;YAC5B,OAAO,aAAa,CAAC,IAAI,MAAM;YAE/B,aAAa;YACb,OAAO,IAAI,CAAC;QAChB,EAAE,OAAO,KAAK;YACV,SAAS;QACb,SAAU;YACN,WAAW;QACf;IACJ;IAEA,qBACI,8OAAC;QAAI,WAAU;kBACX,cAAA,8OAAC;YAAI,WAAU;;8BACX,8OAAC;oBAAG,WAAU;8BAAsC;;;;;;8BAEpD,8OAAC;oBAAK,UAAU;oBAAc,WAAU;;sCACpC,8OAAC;4BAAI,WAAU;;8CACX,8OAAC;oCAAM,SAAQ;oCAAQ,WAAU;8CAA+C;;;;;;8CAGhF,8OAAC;oCACG,IAAG;oCACH,MAAK;oCACL,OAAO;oCACP,UAAU,CAAC,IAAM,SAAS,EAAE,MAAM,CAAC,KAAK;oCACxC,QAAQ;oCACR,WAAU;oCACV,aAAY;;;;;;;;;;;;sCAIpB,8OAAC;4BAAI,WAAU;;8CACX,8OAAC;oCAAM,SAAQ;oCAAW,WAAU;8CAA+C;;;;;;8CAGnF,8OAAC;oCACG,IAAG;oCACH,MAAK;oCACL,OAAO;oCACP,UAAU,CAAC,IAAM,YAAY,EAAE,MAAM,CAAC,KAAK;oCAC3C,QAAQ;oCACR,WAAU;oCACV,aAAY;;;;;;;;;;;;wBAInB,uBACG,8OAAC;4BAAI,WAAU;sCACV;;;;;;sCAIT,8OAAC;4BACG,MAAK;4BACL,UAAU;4BACV,WAAU;sCAET,UAAU,aAAa;;;;;;;;;;;;8BAIhC,8OAAC;oBAAI,WAAU;8BACX,cAAA,8OAAC;wBAAE,WAAU;kCAAwB;;;;;;;;;;;;;;;;;;;;;;AAOzD","debugId":null}},
    {"offset": {"line": 245, "column": 0}, "map": {"version":3,"sources":["file:///H:/mr/spring-cloud-msa-labs-v1/frontend/mini-shopping-mall-frontend/node_modules/next/navigation.js"],"sourcesContent":["module.exports = require('./dist/client/components/navigation')\n"],"names":[],"mappings":"AAAA,OAAO,OAAO","ignoreList":[0],"debugId":null}}]
}