{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["file:///H:/mr/spring-cloud-msa-labs-v1/frontend/mini-shopping-mall-frontend/src/lib/api.ts"],"sourcesContent":["const API_BASE_URL = process.env.NEXT_PUBLIC_API_BASE_URL || 'http://localhost:8080/api';\r\n\r\nexport async function apiRequest<T>(\r\n    endpoint: string,\r\n    options: RequestInit = {}\r\n): Promise<T> {\r\n  const url = `${API_BASE_URL}${endpoint}`;\r\n\r\n  // localStorage에서 토큰 가져오기 (클라이언트 환경에서만)\r\n  let token = null;\r\n  if (typeof window !== 'undefined') {\r\n    token = localStorage.getItem('accessToken');\r\n  }\r\n\r\n  const config: RequestInit = {\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      // 토큰이 있으면 Authorization 헤더 추가\r\n      ...(token && { 'Authorization': `Bearer ${token}` }),\r\n      ...options.headers,\r\n    },\r\n    ...options,\r\n  };\r\n\r\n  console.log('API Request:', url, 'Token:', token ? 'Present' : 'Missing'); // 디버그용\r\n\r\n  const response = await fetch(url, config);\r\n\r\n  console.log('API Response:', response.status); // 디버그용\r\n\r\n  // 401 에러 시 로그아웃 처리\r\n  if (response.status === 401) {\r\n    if (typeof window !== 'undefined') {\r\n      localStorage.removeItem('accessToken');\r\n      localStorage.removeItem('user');\r\n      window.location.href = '/login';\r\n    }\r\n    throw new Error('Authentication failed');\r\n  }\r\n\r\n  if (!response.ok) {\r\n    throw new Error(`API request failed: ${response.status}`);\r\n  }\r\n\r\n  return response.json();\r\n}\r\n\r\n// 로그인 응답 인터페이스\r\nexport interface LoginRequest {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\nexport interface LoginResponse {\r\n  token: string;\r\n  type: string;\r\n  userId: number;\r\n  email: string;\r\n  name: string;\r\n}\r\n\r\n// API 함수들\r\nexport const userApi = {\r\n  getUser: (id: number) => apiRequest<User>(`/users/${id}`),\r\n  login: (credentials: LoginRequest) =>\r\n      apiRequest<LoginResponse>('/users/login', {\r\n        method: 'POST',\r\n        body: JSON.stringify(credentials),\r\n      }),\r\n};\r\n\r\nexport const productApi = {\r\n  getAllProducts: () => apiRequest<Product[]>('/products'),\r\n  getProduct: (id: number) => apiRequest<Product>(`/products/${id}`),\r\n};\r\n\r\nexport const orderApi = {\r\n  createOrder: (order: OrderRequest) =>\r\n      apiRequest<Order>('/orders', {\r\n        method: 'POST',\r\n        body: JSON.stringify(order),\r\n      }),\r\n  getOrder: (id: number) => apiRequest<Order>(`/orders/${id}`),\r\n  getMyOrders: () => apiRequest<Order[]>('/orders/my'), // 새로 추가\r\n};\r\n\r\n// 기존 타입 정의들...\r\nexport interface User {\r\n  id: number;\r\n  email: string;\r\n  name: string;\r\n}\r\n\r\nexport interface Product {\r\n  id: number;\r\n  name: string;\r\n  description: string;\r\n  price: number;\r\n  stockQuantity: number;\r\n  category: string;\r\n  imageUrl: string;\r\n}\r\n\r\nexport interface OrderRequest {\r\n  userId: number;\r\n  productId: number;\r\n  quantity: number;\r\n}\r\n\r\nexport interface Order {\r\n  id: number;\r\n  userId: number;\r\n  totalAmount: number;\r\n  status: string;\r\n  createdAt: string;\r\n}\r\n"],"names":[],"mappings":";;;;;;AAAA,MAAM,eAAe,QAAQ,GAAG,CAAC,wBAAwB,IAAI;AAEtD,eAAe,WAClB,QAAgB,EAChB,UAAuB,CAAC,CAAC;IAE3B,MAAM,MAAM,GAAG,eAAe,UAAU;IAExC,uCAAuC;IACvC,IAAI,QAAQ;IACZ;;IAIA,MAAM,SAAsB;QAC1B,SAAS;YACP,gBAAgB;YAChB,8BAA8B;YAC9B,GAAI,SAAS;gBAAE,iBAAiB,CAAC,OAAO,EAAE,OAAO;YAAC,CAAC;YACnD,GAAG,QAAQ,OAAO;QACpB;QACA,GAAG,OAAO;IACZ;IAEA,QAAQ,GAAG,CAAC,gBAAgB,KAAK,UAAU,QAAQ,YAAY,YAAY,OAAO;IAElF,MAAM,WAAW,MAAM,MAAM,KAAK;IAElC,QAAQ,GAAG,CAAC,iBAAiB,SAAS,MAAM,GAAG,OAAO;IAEtD,mBAAmB;IACnB,IAAI,SAAS,MAAM,KAAK,KAAK;QAC3B;;QAKA,MAAM,IAAI,MAAM;IAClB;IAEA,IAAI,CAAC,SAAS,EAAE,EAAE;QAChB,MAAM,IAAI,MAAM,CAAC,oBAAoB,EAAE,SAAS,MAAM,EAAE;IAC1D;IAEA,OAAO,SAAS,IAAI;AACtB;AAiBO,MAAM,UAAU;IACrB,SAAS,CAAC,KAAe,WAAiB,CAAC,OAAO,EAAE,IAAI;IACxD,OAAO,CAAC,cACJ,WAA0B,gBAAgB;YACxC,QAAQ;YACR,MAAM,KAAK,SAAS,CAAC;QACvB;AACN;AAEO,MAAM,aAAa;IACxB,gBAAgB,IAAM,WAAsB;IAC5C,YAAY,CAAC,KAAe,WAAoB,CAAC,UAAU,EAAE,IAAI;AACnE;AAEO,MAAM,WAAW;IACtB,aAAa,CAAC,QACV,WAAkB,WAAW;YAC3B,QAAQ;YACR,MAAM,KAAK,SAAS,CAAC;QACvB;IACJ,UAAU,CAAC,KAAe,WAAkB,CAAC,QAAQ,EAAE,IAAI;IAC3D,aAAa,IAAM,WAAoB;AACzC","debugId":null}},
    {"offset": {"line": 66, "column": 0}, "map": {"version":3,"sources":["file:///H:/mr/spring-cloud-msa-labs-v1/frontend/mini-shopping-mall-frontend/src/app/products/%5Bid%5D/page.tsx"],"sourcesContent":["'use client';\r\n\r\nimport { useEffect, useState } from 'react';\r\nimport { useRouter } from 'next/navigation';\r\nimport { Product, productApi } from '@/lib/api';\r\n\r\nexport default function ProductDetailPage({ params }: { params: Promise<{ id: string }> }) {\r\n  const [product, setProduct] = useState<Product | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [quantity, setQuantity] = useState(1);\r\n  const [productId, setProductId] = useState<string | null>(null);\r\n  const router = useRouter();\r\n\r\n  useEffect(() => {\r\n    const getParams = async () => {\r\n      const resolvedParams = await params;\r\n      setProductId(resolvedParams.id);\r\n    };\r\n    getParams();\r\n  }, [params]);\r\n\r\n  useEffect(() => {\r\n    if (!productId) return;\r\n\r\n    const fetchProduct = async () => {\r\n      try {\r\n        const data = await productApi.getProduct(Number(productId));\r\n        setProduct(data);\r\n      } catch (err) {\r\n        setError('상품을 불러오는 중 오류가 발생했습니다.');\r\n        console.error(err);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchProduct();\r\n  }, [productId]);\r\n\r\n  const handleOrder = () => {\r\n    if (product) {\r\n      router.push(`/order?productId=${product.id}&quantity=${quantity}`);\r\n    }\r\n  };\r\n\r\n  if (loading) return <div className=\"p-8\">로딩 중...</div>;\r\n  if (error) return <div className=\"p-8 text-red-500\">{error}</div>;\r\n  if (!product) return <div className=\"p-8\">상품을 찾을 수 없습니다.</div>;\r\n\r\n  return (\r\n    <div className=\"container mx-auto p-8\">\r\n      <div className=\"max-w-2xl mx-auto\">\r\n        <h1 className=\"text-3xl font-bold mb-4\">{product.name}</h1>\r\n        \r\n        <div className=\"bg-white border rounded-lg p-6 shadow-lg\">\r\n          <p className=\"text-gray-700 mb-4\">{product.description}</p>\r\n          \r\n          <div className=\"space-y-2 mb-6\">\r\n            <p className=\"text-2xl font-bold text-blue-600\">\r\n              ₩{product.price.toLocaleString()}\r\n            </p>\r\n            <p className=\"text-sm text-gray-500\">카테고리: {product.category}</p>\r\n            <p className=\"text-sm text-gray-500\">재고: {product.stockQuantity}개</p>\r\n          </div>\r\n          \r\n          <div className=\"flex items-center space-x-4 mb-6\">\r\n            <label htmlFor=\"quantity\" className=\"text-sm font-medium\">\r\n              수량:\r\n            </label>\r\n            <input\r\n              id=\"quantity\"\r\n              type=\"number\"\r\n              min=\"1\"\r\n              max={product.stockQuantity}\r\n              value={quantity}\r\n              onChange={(e) => setQuantity(Number(e.target.value))}\r\n              className=\"border border-gray-300 rounded px-3 py-1 w-20\"\r\n            />\r\n          </div>\r\n          \r\n          <div className=\"flex space-x-4\">\r\n            <button\r\n              onClick={handleOrder}\r\n              disabled={product.stockQuantity === 0}\r\n              className=\"bg-green-500 text-white px-6 py-2 rounded hover:bg-green-600 disabled:bg-gray-400\"\r\n            >\r\n              주문하기\r\n            </button>\r\n            \r\n            <button\r\n              onClick={() => router.back()}\r\n              className=\"bg-gray-500 text-white px-6 py-2 rounded hover:bg-gray-600\"\r\n            >\r\n              돌아가기\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAJA;;;;;AAMe,SAAS,kBAAkB,EAAE,MAAM,EAAuC;IACvF,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAkB;IACvD,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACvC,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAiB;IAClD,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACzC,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAiB;IAC1D,MAAM,SAAS,CAAA,GAAA,kIAAA,CAAA,YAAS,AAAD;IAEvB,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,MAAM,YAAY;YAChB,MAAM,iBAAiB,MAAM;YAC7B,aAAa,eAAe,EAAE;QAChC;QACA;IACF,GAAG;QAAC;KAAO;IAEX,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,IAAI,CAAC,WAAW;QAEhB,MAAM,eAAe;YACnB,IAAI;gBACF,MAAM,OAAO,MAAM,iHAAA,CAAA,aAAU,CAAC,UAAU,CAAC,OAAO;gBAChD,WAAW;YACb,EAAE,OAAO,KAAK;gBACZ,SAAS;gBACT,QAAQ,KAAK,CAAC;YAChB,SAAU;gBACR,WAAW;YACb;QACF;QAEA;IACF,GAAG;QAAC;KAAU;IAEd,MAAM,cAAc;QAClB,IAAI,SAAS;YACX,OAAO,IAAI,CAAC,CAAC,iBAAiB,EAAE,QAAQ,EAAE,CAAC,UAAU,EAAE,UAAU;QACnE;IACF;IAEA,IAAI,SAAS,qBAAO,8OAAC;QAAI,WAAU;kBAAM;;;;;;IACzC,IAAI,OAAO,qBAAO,8OAAC;QAAI,WAAU;kBAAoB;;;;;;IACrD,IAAI,CAAC,SAAS,qBAAO,8OAAC;QAAI,WAAU;kBAAM;;;;;;IAE1C,qBACE,8OAAC;QAAI,WAAU;kBACb,cAAA,8OAAC;YAAI,WAAU;;8BACb,8OAAC;oBAAG,WAAU;8BAA2B,QAAQ,IAAI;;;;;;8BAErD,8OAAC;oBAAI,WAAU;;sCACb,8OAAC;4BAAE,WAAU;sCAAsB,QAAQ,WAAW;;;;;;sCAEtD,8OAAC;4BAAI,WAAU;;8CACb,8OAAC;oCAAE,WAAU;;wCAAmC;wCAC5C,QAAQ,KAAK,CAAC,cAAc;;;;;;;8CAEhC,8OAAC;oCAAE,WAAU;;wCAAwB;wCAAO,QAAQ,QAAQ;;;;;;;8CAC5D,8OAAC;oCAAE,WAAU;;wCAAwB;wCAAK,QAAQ,aAAa;wCAAC;;;;;;;;;;;;;sCAGlE,8OAAC;4BAAI,WAAU;;8CACb,8OAAC;oCAAM,SAAQ;oCAAW,WAAU;8CAAsB;;;;;;8CAG1D,8OAAC;oCACC,IAAG;oCACH,MAAK;oCACL,KAAI;oCACJ,KAAK,QAAQ,aAAa;oCAC1B,OAAO;oCACP,UAAU,CAAC,IAAM,YAAY,OAAO,EAAE,MAAM,CAAC,KAAK;oCAClD,WAAU;;;;;;;;;;;;sCAId,8OAAC;4BAAI,WAAU;;8CACb,8OAAC;oCACC,SAAS;oCACT,UAAU,QAAQ,aAAa,KAAK;oCACpC,WAAU;8CACX;;;;;;8CAID,8OAAC;oCACC,SAAS,IAAM,OAAO,IAAI;oCAC1B,WAAU;8CACX;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQb","debugId":null}},
    {"offset": {"line": 289, "column": 0}, "map": {"version":3,"sources":["file:///H:/mr/spring-cloud-msa-labs-v1/frontend/mini-shopping-mall-frontend/node_modules/next/navigation.js"],"sourcesContent":["module.exports = require('./dist/client/components/navigation')\n"],"names":[],"mappings":"AAAA,OAAO,OAAO","ignoreList":[0],"debugId":null}}]
}